diff --git a/kernel/defs.h b/kernel/defs.h
index 9235daf..3a25d3c 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -65,7 +65,6 @@ void pg_inc_link(void*);
 int pg_get_link(void*);
 void pg_set_link(void*, int);
 void* kalloc(void);
-void kfree(void*);
 void kinit(void);
 
 // log.c
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index f8b1581..fe64fb8 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -12,7 +12,7 @@
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[];  // first address after kernel.
-                    // defined by kernel.ld.
+// defined by kernel.ld.
 
 struct run {
   struct run *next;
@@ -23,6 +23,25 @@ struct {
   struct run *freelist;
 } kmem;
 
+// Free the page of physical memory pointed at by pa,
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void kfree(void *pa) {
+  struct run *r;
+
+  if (((uint64)pa % PGSIZE) != 0 || (char *)pa < end || (uint64)pa >= PHYSTOP)
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(pa, 1, PGSIZE);
+
+  r = (struct run *)pa;
+
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+}
+
 int page_count = (128 * 1024 * 1024) / PGSIZE;
 int page_link_count[(128 * 1024 * 1024) / PGSIZE];
 
@@ -40,6 +59,7 @@ void pg_dec_link(void *pa) {
   if (pg < 0) {
     return;
   }
+  acquire(&kmem.lock);
   page_link_count[pg]--;
   if (page_link_count[pg] < 0) {
     panic("dec page with zero links");
@@ -47,6 +67,7 @@ void pg_dec_link(void *pa) {
   if (page_link_count[pg] == 0) {
     kfree(pa);
   }
+  release(&kmem.lock);
 }
 
 void pg_inc_link(void *pa) {
@@ -54,7 +75,9 @@ void pg_inc_link(void *pa) {
   if (pg < 0) {
     return;
   }
+  acquire(&kmem.lock);
   page_link_count[pg]++;
+  release(&kmem.lock);
 }
 
 int pg_get_link(void *pa) {
@@ -70,7 +93,9 @@ void pg_set_link(void *pa, int value) {
   if (pg < 0) {
     return;
   }
+  acquire(&kmem.lock);
   page_link_count[pg] = value;
+  release(&kmem.lock);
 }
 
 void kinit() {
@@ -81,28 +106,11 @@ void kinit() {
 void freerange(void *pa_start, void *pa_end) {
   char *p;
   p = (char *)PGROUNDUP((uint64)pa_start);
-  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE) kfree(p);
-}
-
-// Free the page of physical memory pointed at by pa,
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void kfree(void *pa) {
-  struct run *r;
-
-  if (((uint64)pa % PGSIZE) != 0 || (char *)pa < end || (uint64)pa >= PHYSTOP)
-    panic("kfree");
-
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
-
-  r = (struct run *)pa;
-
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE) {
+    acquire(&kmem.lock);
+    kfree(p);
+    release(&kmem.lock);
+  }
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -117,6 +125,6 @@ void *kalloc(void) {
   release(&kmem.lock);
 
   if (r) memset((char *)r, 5, PGSIZE);  // fill with junk
-  pg_set_link((void *)r, 1);
+  if (r) pg_set_link((void *)r, 1);
   return (void *)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index fb2dfcd..1971a95 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -63,6 +63,7 @@ static inline void w_sip(uint64 x) { asm volatile("csrw sip, %0" : : "r"(x)); }
 #define SIE_SEIE (1L << 9)  // external
 #define SIE_STIE (1L << 5)  // timer
 #define SIE_SSIE (1L << 1)  // software
+
 static inline uint64 r_sie() {
   uint64 x;
   asm volatile("csrr %0, sie" : "=r"(x));
@@ -75,6 +76,7 @@ static inline void w_sie(uint64 x) { asm volatile("csrw sie, %0" : : "r"(x)); }
 #define MIE_MEIE (1L << 11)  // external
 #define MIE_MTIE (1L << 7)   // timer
 #define MIE_MSIE (1L << 3)   // software
+
 static inline uint64 r_mie() {
   uint64 x;
   asm volatile("csrr %0, mie" : "=r"(x));
@@ -252,8 +254,9 @@ typedef uint64 *pagetable_t;  // 512 PTEs
 #define PTE_R (1L << 1)
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
-#define PTE_U (1L << 4)    // user can access
-#define PTE_COW (1L << 9)  // page is shared between processes
+#define PTE_U (1L << 4)      // user can access
+#define PTE_WAS_W (1L << 8)  // page was available for write before cow
+#define PTE_COW (1L << 9)    // page is shared between processes
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a8d3cbc..a9c5bc2 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -64,21 +64,22 @@ void usertrap(void) {
       setkilled(p);
       goto end;
     }
-    if ((*pte & PTE_COW) && pg_get_link((void *)PTE2PA(*pte)) == 1) {
+    if ((*pte & PTE_COW) && (*pte & PTE_WAS_W) &&
+        pg_get_link((void *)PTE2PA(*pte)) == 1) {
       *pte |= PTE_W;
       *pte &= ~PTE_COW;
       goto end;
     }
-    if ((*pte & PTE_COW) && (*pte & PTE_V) &&
-        (*pte & PTE_U)) {  // process use cow page
+    if ((*pte & PTE_COW) && (*pte & PTE_V) && (*pte & PTE_U) &&
+        (*pte & PTE_WAS_W)) {  // process use cow page
       char *mem = kalloc();
       if (mem == 0) {
         printf("usertrap(): cannot kalloc page pid=%d\n", r_scause(), p->pid);
         printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
         setkilled(p);
       } else {
-        uint flags =
-            (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW;  // set available for write
+        uint flags = ((PTE_FLAGS(*pte) | PTE_W) &
+                      ~(PTE_COW | PTE_WAS_W));  // set available for write
         uint64 pa = PTE2PA(*pte);
         memmove(mem, (char *)pa, PGSIZE);
         uvmunmap(p->pagetable, va, 1, 0);
diff --git a/kernel/vm.c b/kernel/vm.c
index e283333..9e68dd9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -265,13 +265,16 @@ int uvmcopy(pagetable_t old, pagetable_t new, uint64 sz) {
     if ((*pte & PTE_V) == 0) panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = (PTE_FLAGS(*pte) | PTE_COW) & ~PTE_W;
+    if (*pte & PTE_W) {
+      flags |= PTE_WAS_W;
+    }
     if (mappages(new, i, PGSIZE, pa, flags) != 0) {
       goto err;
     }
     pg_inc_link((void *)pa);
     uvmunmap(old, i, 1, 0);
     if (mappages(old, i, PGSIZE, pa, flags) != 0) {
-      goto err;
+      goto backup;
     }
   }
   return 0;
@@ -279,6 +282,10 @@ int uvmcopy(pagetable_t old, pagetable_t new, uint64 sz) {
 err:
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
+backup:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  mappages(old, i, PGSIZE, pa, PTE_FLAGS(*pte));
+  return -1;
 }
 
 // mark a PTE invalid for user access.
@@ -325,7 +332,6 @@ void vmprint(pagetable_t pagetable) {
 // Return 0 on success, -1 on error.
 int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
   uint64 n, va0, pa0;
-
   while (len > 0) {
     if (dstva >= MAXVA) {
       return -1;
@@ -335,12 +341,15 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
     if (pte == 0 || (*pte & PTE_V) == 0) {  // not available page
       return -1;
     } else if (*pte & PTE_COW) {  // process use cow page
+      if ((*pte & PTE_WAS_W) == 0) {
+        return -1;
+      }
       char *mem = kalloc();
       if (mem == 0) {
         return -1;
       }
       uint64 pa = PTE2PA(*pte);
-      uint flags = (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW;
+      uint flags = ((PTE_FLAGS(*pte) | PTE_W) & ~(PTE_COW | PTE_WAS_W));
       memmove(mem, (void *)pa, PGSIZE);
       uvmunmap(pagetable, va0, 1, 0);
       if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0) {
diff --git a/user/usertests.c b/user/usertests.c
index b9d1440..4818726 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -77,9 +77,9 @@ void copyout(char *s) {
   for (int ai = 0; ai < 2; ai++) {
     uint64 addr = addrs[ai];
 
-    int fd = open("README", 0);
+    int fd = open("xv6-readme", 0);
     if (fd < 0) {
-      printf("open(README) failed\n");
+      printf("open(xv6-readme) failed\n");
       exit(1);
     }
     int n = read(fd, (void *)addr, 8192);
@@ -256,7 +256,7 @@ void rwsbrk() {
   close(fd);
   unlink("rwsbrk");
 
-  fd = open("README", O_RDONLY);
+  fd = open("xv6-readme", O_RDONLY);
   if (fd < 0) {
     printf("open(rwsbrk) failed\n");
     exit(1);
@@ -1793,7 +1793,7 @@ void dirfile(char *s) {
     printf("%s: unlink dirfile/xx succeeded!\n", s);
     exit(1);
   }
-  if (link("README", "dirfile/xx") == 0) {
+  if (link("xv6-readme", "dirfile/xx") == 0) {
     printf("%s: link to dirfile/xx succeeded!\n", s);
     exit(1);
   }
@@ -1831,7 +1831,7 @@ void iref(char *s) {
     }
 
     mkdir("");
-    link("README", "");
+    link("xv6-readme", "");
     fd = open("", O_CREATE);
     if (fd >= 0) close(fd);
     fd = open("xx", O_CREATE);
