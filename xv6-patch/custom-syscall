diff --git a/kernel/defs.h b/kernel/defs.h
index 11c9989..8415361 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void yield(void);
 int either_copyout(int user_dst, uint64 dst, void* src, uint64 len);
 int either_copyin(void* dst, int user_src, uint64 src, uint64 len);
 void procdump(void);
+void dump(void);
+int dump2(int pid, int register_num, uint64* return_value);
 
 // swtch.S
 void swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index a5bd2f7..bb9c4a9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -506,6 +506,79 @@ void sleep(void *chan, struct spinlock *lk) {
   acquire(lk);
 }
 
+void dump(void) {
+  struct proc *p = myproc();
+  printf("Process %d dump\n", p->pid);
+  printf("s2 = %d\n", p->trapframe->s2);
+  printf("s3 = %d\n", p->trapframe->s3);
+  printf("s4 = %d\n", p->trapframe->s4);
+  printf("s5 = %d\n", p->trapframe->s5);
+  printf("s6 = %d\n", p->trapframe->s6);
+  printf("s7 = %d\n", p->trapframe->s7);
+  printf("s8 = %d\n", p->trapframe->s8);
+  printf("s9 = %d\n", p->trapframe->s9);
+  printf("s10 = %d\n", p->trapframe->s10);
+  printf("s11 = %d\n", p->trapframe->s11);
+}
+
+int dump2(int pid, int register_num, uint64 *return_value) {
+  if (register_num < 2 || register_num > 11) {
+    return -3;
+  }
+
+  for (struct proc *p = proc; p < &proc[NPROC]; ++p) {
+    acquire(&p->lock);
+    if (p->pid == pid) {
+      release(&p->lock);
+      uint64 value = 0;
+      if (register_num == 2) {
+        value = p->trapframe->s2;
+      }
+      if (register_num == 3) {
+        value = p->trapframe->s3;
+      }
+      if (register_num == 4) {
+        value = p->trapframe->s4;
+      }
+      if (register_num == 5) {
+        value = p->trapframe->s5;
+      }
+      if (register_num == 6) {
+        value = p->trapframe->s6;
+      }
+      if (register_num == 7) {
+        value = p->trapframe->s7;
+      }
+      if (register_num == 8) {
+        value = p->trapframe->s8;
+      }
+      if (register_num == 9) {
+        value = p->trapframe->s9;
+      }
+      if (register_num == 10) {
+        value = p->trapframe->s10;
+      }
+      if (register_num == 11) {
+        value = p->trapframe->s11;
+      }
+      struct proc *current_process = myproc();
+      acquire(&wait_lock);
+      if (p != current_process && p->parent != current_process) {
+        release(&wait_lock);
+        return -1;
+      }
+      release(&wait_lock);
+      if (either_copyout(1, (uint64)return_value, &value, sizeof(uint64)) ==
+          -1) {
+        return -4;
+      }
+      return 0;
+    }
+    release(&p->lock);
+  }
+  return -2;
+}
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void wakeup(void *chan) {
diff --git a/kernel/syscall.c b/kernel/syscall.c
index d40045a..61e3f06 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -84,6 +84,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_dump(void);
+extern uint64 sys_dump2(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -95,6 +97,7 @@ static uint64 (*syscalls[])(void) = {
     [SYS_sleep] sys_sleep, [SYS_uptime] sys_uptime, [SYS_open] sys_open,
     [SYS_write] sys_write, [SYS_mknod] sys_mknod,   [SYS_unlink] sys_unlink,
     [SYS_link] sys_link,   [SYS_mkdir] sys_mkdir,   [SYS_close] sys_close,
+    [SYS_dump] sys_dump,   [SYS_dump2] sys_dump2,
 };
 
 void syscall(void) {
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 1e1f4ba..9260d05 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link 19
 #define SYS_mkdir 20
 #define SYS_close 21
+#define SYS_dump 22
+#define SYS_dump2 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 993d8e6..24c4da3 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -68,3 +68,20 @@ uint64 sys_uptime(void) {
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_dump(void) {
+  dump();
+  return 0;
+}
+
+uint64 sys_dump2(void) {
+  int pid;
+  int register_num;
+  uint64 return_value;
+
+  argint(0, &pid);
+  argint(1, &register_num);
+  argaddr(2, &return_value);
+
+  return dump2(pid, register_num, (uint64 *)return_value);
+}
diff --git a/user/pingpong.c b/user/pingpong.c
index b44d0e5..d396f2d 100644
--- a/user/pingpong.c
+++ b/user/pingpong.c
@@ -1,6 +1,22 @@
 #include "kernel/types.h"
 #include "user/user.h"
 
+int pipe_read(int fd, char* dst, int count) {
+  int done = 0;
+  while (1) {
+    int c = read(fd, &dst[done], count - done);
+    if (c == -1) {
+      return -1;
+    } else {
+      done += c;
+    }
+
+    if (done == count) {
+      return 0;
+    }
+  }
+}
+
 int main() {
   int pipefd[2];
   if (pipe(pipefd) != 0) {
@@ -16,9 +32,9 @@ int main() {
     exit(1);
   }
 
-  char message[4];
+  char message[5];
   if (child_pid == 0) {
-    if (read(pipefd[0], message, 4) == -1) {
+    if (pipe_read(pipefd[0], message, 4) == -1) {
       fprintf(2, "Cannot receive ping\n");
       exit(1);
     }
@@ -33,7 +49,7 @@ int main() {
       fprintf(2, "Cannot send ping\n");
       exit(1);
     }
-    if (read(pipefd[0], message, 4) == -1) {
+    if (pipe_read(pipefd[0], message, 4) == -1) {
       fprintf(2, "Cannot receive pong\n");
       exit(1);
     }
diff --git a/user/user.h b/user/user.h
index 839130c..db4bbb6 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void dump(void);
+int dump2(int pid, int register_num, uint64* return_value);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc38a37 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("dump");
+entry("dump2");
